{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h1>FAQ</h1>\n<p>Welcome to the FAQ. Here you will find a list of common questions and answers along with CLI issues you may face.</p>\n<h2>CLI Issues</h2>\n<h3>1. Does Appsody support Enterprise Windows users?</h3>\n<p>Enterprise Windows users very frequently authenticate through Azure Active Directory (AAD). In those circumstances, the Docker daemon on Windows may not be authorized to access any of the folders that are owned by the AAD user. For this reason, Appsody supports Enterprise Windows users through a workaround.</p>\n<ol>\n<li>\n<p>Create a new project (pick a folder that is outside of your home directory, or Docker will not have access to it).</p>\n</li>\n<li>\n<p>Go into that project directory and run <code>appsody init &#x3C;stack></code></p>\n</li>\n<li>\n<p>Create a new folder called <code>C:\\my-appsody-config-dir\\</code></p>\n</li>\n<li>\n<p>Run <code>appsody init --config C:\\my-appsody-config-dir\\.appsody-config.yaml</code></p>\n</li>\n<li>\n<p><code>notepad C:\\my-appsody-config-dir\\.appsody-config.yaml</code></p>\n</li>\n<li>\n<p>Change the entry <code>home:</code> to <code>C:\\my-appsody-config-dir</code></p>\n</li>\n<li>\n<p>Run <code>appsody run --config C:\\my-appsody-config-dir\\.appsody-config.yaml</code></p>\n</li>\n</ol>\n<p>For more information on this issue, click <a href=\"https://github.com/appsody/appsody/issues/24\">here</a>.</p>\n<h3>2. Why am I getting a cross-device link error on Appsody extract?</h3>\n<p>This was an issue that was faced in an older version of the software. It occurred when the Appsody CLI and the Appsody project were located on different disk volumes. If you are experiencing this problem, navigate to our <a href=\"https://github.com/appsody\">GitHub page</a> and ensure you are operating on the latest version. If you would like more information on this issue, please click <a href=\"https://github.com/appsody/appsody/issues/82\">here</a>.\n</p>\n<h3>3. Why is Appsody deploy not displaying the URL of the Knative service?</h3>\n<p>Sometimes, when you run <code>appsody deploy</code>, you may see a message that fails to provide the URL of the deployed Knative service. Although the Knative URL is not displaying, Appsody should have still been deployed successfully. This is a timing issue where <code>kubectl apply</code> finishes executing before all resources have been made available.</p>\n<h3>4. Is the HTTP_PROXY environment variable used by the CLI?</h3>\n<p>Versions of Appsody at 0.2.5 and older do not support going through a HTTP proxy. However, newer versions do: Before launching Appsody, you just need to set the HTTP_PROXY or HTTPS_PROXY environment variable.</p>\n<h3>5. Why can't the CLI read my index?</h3>\n<p>When you encounter the following error</p>\n<pre><code>[Error] Could not read indices: Failed to get repository index: 404 Not Found response trying to download https://raw.githubusercontent.com/appsody/stacks/master/index.yaml\n</code></pre>\n<ol>\n<li>\n<p>Go to your home directory and open the <strong>repository.yaml</strong> using an editor of your choice.</p>\n<ul>\n<li><code>cd ~/.appsody/repository/</code> (macOS/Linux)</li>\n<li><code>cd %HOMEPATH%/repository/</code> (Windows)</li>\n</ul>\n</li>\n<li>\n<p>Replace the appsodyhub URL to use the latest appsodyhub index which is:</p>\n</li>\n</ol>\n<p><code>https://github.com/appsody/stacks/releases/latest/download/incubator-index.yaml</code></p>\n<ol start=\"3\">\n<li>Save your changes and try running your command again.</li>\n</ol>","frontmatter":{"path":"/docs/faq","title":"FAQ"}}},{"node":{"html":"<h1>Welcome to Appsody</h1>\n<p>Appsody is designed to help you develop containerized applications for the cloud.</p>\n<p>If you're a software developer, our aim is to greatly improve your developer experience by removing the burden of managing the full software development stack. With Appsody,\nyou can build applications for the cloud that are ready to be deployed to Kubernetes without being an expert on the underlying container technology. You can simply focus on the important stuff - developing application code!  </p>\n<p>If you're responsible for defining standards for application runtime environments such as software levels, Appsody allows you to control the stacks that your developers use. You can define a set of technologies that are configurable, reusable, and already infused with cloud native capabilities. You get to implement and maintain your standards, ensuring consistency and reliability.</p>\n<p>Appsody consists of 3 key components:</p>\n<h3>Appsody Stacks</h3>\n<p>These are configurable technology stacks built with popular runtimes and frameworks, such as <em>Java with Eclipse MicroProfile</em> and <em>Node.js with Express</em>. These stacks  provide the foundation for building applications that can be deployed and managed effectively in Kubernetes. Stacks allow for rapid development, whilst giving the stack provider the ability to control how the applications are composed. For example, which security policies are applied or which version of a dependency is used. For more\ninformation, see <a href=\"/docs/stacks/stacks-overview.md\">Appsody Stacks</a>.</p>\n<h3>Appsody Hub</h3>\n<p>The Hub is the central point of control for Appsody Stacks where you can find available stacks, create new stacks, or modify existing ones. You can use the Hub content in the public repo or clone it to provide a private Hub that's based on your requirements. By making changes to the Stacks in the Hub, you can deploy updates to any application that's been built on them, simply by restarting the application.</p>\n<h3>Appsody CLI</h3>\n<p>No project is complete without a nice new CLI to play with. The <a href=\"/docs/using-appsody/cli-commands.md\">Appsody CLI</a> is powerful and intuitive, allowing developers to discover the available stacks and bring them into their local development environment. From here, they can build, run, test, and deploy applications locally. The Docker container that's built for an application can then be integrated with Tekton pipelines and deployed to Kubernetes cloud environments. For more information, see <a href=\"/docs/using-appsody/building-and-deploying.md#Deploying-your-app-through-a-Tekton-pipeline\">Deploying your app through a Tekton pipeline</a>.</p>\n<h2>How does it work?</h2>\n<p>Appsody provides pre-configured application stacks, which use the well-known Dockerfile syntax to specify which language runtimes, frameworks, libraries, and tools are included. Project templates build upon these stacks, providing developers with a templatized application to bring into their IDE of choice and begin development.</p>\n<p>When developers run, debug, or test their application using the Appsody CLI, it starts a container with the stack image, makes the development workspace available to the running container, and starts the Appsody controller. The controller is configurable through environment variables in the stack and manages the application within the running container. For example, the controller can watch for changes in the application <code>/src</code> directory. When these changes are saved, the controller restarts the application running in a docker container.</p>\n<h2>Contributing</h2>\n<p>We welcome all contributions.</p>\n<p>If you'd like to get involved, read our <a href=\"https://github.com/appsody/website/blob/master/CONTRIBUTING.md\">Contribution guidelines</a> and come and chat to us in <a href=\"https://appsody-slack.eu-gb.mybluemix.net/\">Slack</a>.</p>\n<p>Want to see your framework available as an Appsody Stack? See <a href=\"/docs/stacks/create.md\">Creating</a> and <a href=\"/docs/stacks/modify.md\">Modifying</a> Stacks and join the <code>#stack-providers</code> channel on Slack to introduce yourself!</p>\n<h2>License</h2>\n<p>This project is licensed under the Apache 2.0 license, and all contributed stacks must also be licensed under the Apache 2.0 license. Each contributed stack should include a LICENSE file containing the Apache 2.0 license. More information can be found in the LICENSE file or online at</p>\n<p><a href=\"http://www.apache.org/licenses/LICENSE-2.0\">http://www.apache.org/licenses/LICENSE-2.0</a></p>","frontmatter":{"path":"/docs","title":"Appsody Overview"}}},{"node":{"html":"<h1>Quick Start</h1>\n<p>If you haven't already installed Appsody, follow the steps described in <a href=\"/docs/getting-started/installation.md\">Installation</a>.</p>\n<p>Creating a new Appsody project is easy! All you need is a few commands to create a containerized development environment running with the stack of your choice.</p>\n<p>First, choose a development stack. To see all the available stacks, run:  </p>\n<pre><code>appsody list\n</code></pre>\n<p>Create a new directory for your project and run <code>appsody init &#x3C;stack></code> to download the template project. The following example uses the <code>nodejs-express</code> stack to create\na fully functional Appsody project:</p>\n<pre><code>mkdir my-project\ncd my-project\nappsody init nodejs-express\n</code></pre>\n<p>Start the development container:</p>\n<pre><code>appsody run\n</code></pre>\n<p>Great! Now the project is running in a docker container, and the container is linked to the project source code on your local system. For <code>nodejs-express</code>, navigate to <a href=\"http://localhost:3000\">http://localhost:3000</a> to see the output. Other stacks might use a different URL, so check the <a href=\"https://github.com/appsody/stacks/tree/master/incubator\">documentation</a> for your chosen stack.</p>\n<p>Now let's try changing the code. Edit the file <code>app.js</code> to output something other than \"Hello from Appsody!\". When you save the file, Appsody picks up the change and automatically updates the container. Refresh <a href=\"http://localhost:3000\">http://localhost:3000</a> to see the new message!</p>\n<p>You are ready to continue developing your application.</p>\n<ul>\n<li>To stop the container, press <code>Ctrl-C</code> in the terminal.</li>\n<li>To enable the debugger, restart the container with <code>appsody debug</code>.</li>\n<li>When you are ready to build a production docker image, run <code>appsody build</code>.</li>\n</ul>\n<p><strong>Tip:</strong> You can get more information about all the available commands by running <code>appsody help [command]</code> or <code>appsody &#x3C;command> --help</code>.</p>","frontmatter":{"path":"/docs/getting-started/quick-start","title":"Quick Start"}}},{"node":{"html":"<h1>Building and Testing Stacks</h1>\n<p>The instructions below will reference the \"base directory\", which will be the directory containing the clone or copy of the appsody/stacks git repository.</p>\n<p>Once you have created or updated a stack, use scripts in the <code>ci/</code> directory to build stack images and templates, and to generate an appsody repository index you can use for local testing. From the base directory:</p>\n<ul>\n<li><code>./ci/build.sh</code> combines several operations (lint, package, test) for the specified stack</li>\n<li><code>./ci/lint.sh</code> will verify your stack, linting the stack.yaml and verifying directory contents</li>\n<li><code>./ci/package.sh</code> builds the docker image for the specified stack, along with packaging templates and generating repository indexes.</li>\n<li><code>./ci/test.sh</code> will run tests to verify stack behavior</li>\n</ul>\n<h2>Building a stack locally using build scripts</h2>\n<p>From the base directory:</p>\n<ol>\n<li>\n<p>Run build script and specify the desired stack as a parameter, for example:</p>\n<pre><code>./ci/build.sh . incubator/nodejs-express\n</code></pre>\n<p>Note that if a stack is not specified, all stacks in all repositories will be built.</p>\n</li>\n<li>\n<p>Add the generated appsody repository to the repository list:</p>\n<pre><code>appsody repo add &#x3C;local-repo-name> file://$PWD/ci/assets/&#x3C;local-stack-repo>\n</code></pre>\n<p>The value of <code>&#x3C;local-stack-repo></code> can be <code>incubator-index-local.yaml</code> or <code>experimental-index-local.yaml</code> or <code>stable-index-local.yaml</code>. For example:</p>\n<pre><code>appsody repo add my-repo file://$PWD/ci/assets/incubator-index-local.yaml\n</code></pre>\n</li>\n<li>\n<p>Set an environment variable to use locally created images:</p>\n<pre><code>export APPSODY_PULL_POLICY=IFNOTPRESENT\n</code></pre>\n</li>\n</ol>\n<p>You can now use the generated local repository to create new projects:</p>\n<pre><code>appsody init incubator-index-local/nodejs-express\n</code></pre>\n<p>Local appsody operations will also be performed against already pulled or rebuilt stack images.</p>\n<h2>Building a stack image locally without build scripts</h2>\n<p>To build your stack image locally follow the below steps:</p>\n<ol>\n<li>\n<p>Navigate to the <code>&#x3C;repository>/&#x3C;stack-id>/image</code> directory</p>\n</li>\n<li>\n<p>Build stack image:</p>\n<pre><code>docker build -t &#x3C;org-name>/&#x3C;stack-id> -t &#x3C;org-name>/&#x3C;stack-id>:&#x3C;tag> -f Dockerfile-stack .\n</code></pre>\n<p>You now have access to the stack image to use and test locally. Note the local image should be tagged with the desired release (see below). The tag value is usually the the major and minor version of the stack, e.g. <code>appsody/nodejs:0.4</code></p>\n</li>\n<li>\n<p>Set an environment variable to use locally created image:</p>\n<pre><code>export APPSODY_PULL_POLICY=IFNOTPRESENT\n</code></pre>\n</li>\n</ol>\n<p>You can now use the generated local repository to create new projects:</p>\n<pre><code>appsody init incubator-index-local/nodejs\n</code></pre>\n<p>Local appsody operations will also be performed against already pulled or rebuilt stack images.</p>\n<h2>Associating a template with a specific stack image</h2>\n<p>For an alreading initialized project:</p>\n<ol>\n<li>\n<p>Update the contents of <code>.appsody-config.yaml</code></p>\n<pre><code>stack: &#x3C;org-name>/&#x3C;stack-id>:&#x3C;tag>\n</code></pre>\n</li>\n<li>\n<p>Use <code>appsody</code> commands as usual:</p>\n<pre><code>appsody run\nappsody test\nappsody build\n</code></pre>\n</li>\n</ol>\n<p>To initialize a new project:</p>\n<ol>\n<li>\n<p>Repackage the templates for the stack, from the base directory:</p>\n<pre><code>./ci/build.sh . &#x3C;repository>/&#x3C;stack-id>\n</code></pre>\n<p>For example, <code>./ci/build.sh . incubator/nodejs-express</code></p>\n</li>\n<li>\n<p>Initialize a project with the new stack image, and run appsody commands as usual:</p>\n<pre><code>mkdir -p /tmp/nodejs\ncd /tmp/nodejs\nappsody init incubator-index-local/nodejs-express &#x3C;optional template>\nappsody test\n</code></pre>\n</li>\n</ol>","frontmatter":{"path":"/docs/stacks/build-and-test","title":"Building and Testing Stacks"}}},{"node":{"html":"<h1>Creating a Stack</h1>\n<p>A stack is made up of two main components, the stack image and templates that\nuse the stack's image.</p>\n<h2>Getting started</h2>\n<p>The quickest way to get started creating a new stack is to use the <a href=\"https://github.com/appsody/stacks/tree/master/samples/sample-stack\">sample stack</a>.</p>\n<ol>\n<li>\n<p>Clone the stacks repository:</p>\n<pre><code class=\"language-bash\">git clone https://github.com/appsody/stacks.git\ncd stacks/samples/sample-stack\n</code></pre>\n</li>\n</ol>\n<p>You now have the basic <a href=\"/docs/stacks/stack-structure\">structure</a> of a stack ready to create an Appsody stack.</p>\n<h2>Creating the stack image</h2>\n<p>The stack image contains everything that will be common throughout all templates that leverage it. For example, the <a href=\"https://github.com/appsody/stacks/tree/master/incubator/nodejs-express/image\"><code>nodejs-express</code></a> stack image provides health endpoints and prometheus metrics without developers needing to implement it themselves.</p>\n<p>The <code>/image</code> directory will contain everything that is needed for the stack's image. You <strong>must</strong> include a <code>Dockerfile-stack</code> file in the <code>/image</code> directory, which defines how the stack image is built.</p>\n<p>Stack creators configure <a href=\"/docs/stacks/environment-variables\">enviroment variables</a> in <code>Dockerfile-stack</code> to specify the behaviour they expect from the stack throughout the application development lifecycle. <code>Appsody CLI</code> and <code>Appsody controller</code> inspect these environment variables and then drive the expected behaviour for the developer.</p>\n<p>If a stack image is built upon another stack's image, it will inherit all the Appsody variables from the base stack. It can override the variables it wants to change. This allows users to create stacks with slightly different behaviour while still getting updates from the base stack.</p>\n<p>The <code>/image/project</code> directory contains the base of the application. You may decide not to include any application code here but it is recommended to add some value to the stack. For example, by controlling dependency versions. The <code>project</code> <strong>must</strong> include a production <code>Dockerfile</code> here which will be used by the <a href=\"/docs/using-appsody/cli-commands/#appsody-build\"><code>appsody build</code></a> command.</p>\n<h2>Creating a template</h2>\n<p>Templates provide an initial application to enable developers to get started with a stack. They provide a starter application that a developer can expand and adapt as they require.</p>\n<p>All templates should be created within <code>/templates</code>. Every template is contained within its own directory, <code>/templates/&#x3C;template-name></code>.</p>\n<p>Each template must contain <code>appsody-config.yaml</code> to specify what stack image the template will use. For example:</p>\n<pre><code>stack: &#x3C;org-name>/&#x3C;stack-id>\n</code></pre>\n<p>If the stack is intended to be contributed to the  <a href=\"https://github.com/appsody/stacks\">Appsody stacks repository</a> the stack image should be called <code>appsody/&#x3C;stack-name>:&#x3C;stack-version></code>.</p>\n<h2>Building and testing stacks locally</h2>\n<p>Now that have you have created a stack you can <a href=\"/docs/stacks/build-and-test\">build and test</a> it locally.</p>\n<h2>Contributing a stack</h2>\n<p>If you would like to contribute a new stack to the <a href=\"https://github.com/appsody/stacks\">stacks repository</a> the Appsody <a href=\"https://github.com/appsody/website/blob/master/CONTRIBUTING.md\">contributing guildlines</a> explains how.</p>\n<p>We welcome new contributions but before starting a large piece of work we recommend to reach out to us on <a href=\"http://appsody-slack.eu-gb.mybluemix.net/\">slack</a> or <a href=\"https://github.com/appsody/stacks/issues/\">raise an issue</a> to start a discussion.</p>\n<h2>Maintaining a separate repository</h2>\n<p>In addition to the main Appsody stacks repository, you can maintain your own set of stacks. This is useful for developing stacks and separating sets of stacks for different uses.</p>\n<p>By default you have access to the <code>appsodyhub</code> repository:</p>\n<pre><code>$ appsody repo list\nNAME            URL                                                               \n*appsodyhub     https://github.com/appsody/stacks/releases/latest/download/incubator-index.yaml  \nexperimental    https://github.com/appsody/stacks/releases/latest/download/experimental-index.yaml\n</code></pre>\n<p>A repository is defined by an <code>index.yaml</code>. This file lists all stacks and  templates it wants to make avalible.  See the <code>appsodyhub</code> <a href=\"https://raw.githubusercontent.com/appsody/stacks/master/index.yaml\">index</a> as an example.</p>\n<p>Each template section must include a link to its <code>.tar.gz</code> file. This will be used by <code>appsody init</code> to initialize a Appsody project.</p>\n<p>You can add you repository by running:</p>\n<pre><code>appsody repo add &#x3C;name> &#x3C;index-url>\n</code></pre>\n<p>For example:</p>\n<pre><code>appsody repo add my-repo file:///Users/foo/index.yaml\n\nappsody repo list\nNAME           URL                                                               \n*appsodyhub    https://github.com/appsody/stacks/releases/latest/download/incubator-index.yaml\nexperimental   https://github.com/appsody/stacks/releases/latest/download/experimental-index.yaml\nmy-repo        file:///Users/foo/index.yaml\n</code></pre>\n<p>Once the repository has been added you can access the stacks in that repo by specifying the repository name when initializing your project:</p>\n<pre><code>appsody init my-repo/&#x3C;stack-name>\n</code></pre>","frontmatter":{"path":"/docs/stacks/create","title":"Creating a Stack"}}},{"node":{"html":"<h1>Modifying a Stack</h1>\n<p>You may decide to modify an existing stack instead of creating one from scratch. This is an option if you are looking to contribute to the current Appsody stacks or maintain a separate modified version.</p>\n<p>To modify an existing stack:</p>\n<ol>\n<li>Clone the stacks repostory:</li>\n</ol>\n<pre><code>git clone https://github.com/appsody/stacks.git\ncd stacks\n</code></pre>\n<ol start=\"2\">\n<li>Modify the stack or templates making sure that you follow the <a href=\"/docs/stacks/stack-structure\">stack structure</a>.</li>\n</ol>\n<h2>Modifying the stack image</h2>\n<p>If you have modified files within <code>/image</code> you will need to <a href=\"/docs/stacks/build-and-test\">build and test</a> to make sure the stack and its templates are working as intended.</p>\n<p><strong>Note:</strong> You should test all other Appsody commands that the stack supports also.</p>\n<p>When stack image changes are made, make sure to update <code>stack-name/README.md</code>.\nYou should include:</p>\n<ul>\n<li>Dependency versions that would be useful to the developer</li>\n<li>Any endpoints that are enforced or provided by the stack</li>\n<li>Any restrictions/limitations of the stack</li>\n</ul>\n<h2>Modifying a template</h2>\n<p>Modifying a template is simple and allows the developer to get started with their applications, quicker. Whilst modifying templates consider if the functionality may be better placed in the stack image itself to affect all templates.</p>\n<ol>\n<li>Navigate to modified template</li>\n</ol>\n<pre><code>cd templates/&#x3C;template-name>\n</code></pre>\n<ol start=\"2\">\n<li>Run template:</li>\n</ol>\n<pre><code>appsody run\n</code></pre>\n<h2>Building and testing stacks locally</h2>\n<p>Now that have you have created a stack you can <a href=\"/docs/stacks/build-and-test\">build and test</a> it locally.</p>","frontmatter":{"path":"/docs/stacks/modify","title":"Modifying a Stack"}}},{"node":{"html":"<h2>Stack structure</h2>\n<pre><code class=\"language-bash\">my-stack\n├── README.md\n├── stack.yaml\n├── image/\n|   ├── project/\n|   |   └── Dockerfile\n│   └── Dockerfile-stack\n└── templates/\n    └── my-template/\n</code></pre>\n<h2>Stack.yaml</h2>\n<p>The stack.yaml defines different components of the stack and which template the stack should use by default. See the example below:</p>\n<pre><code class=\"language-bash\">name: Sample Application Stack # concise one line name for the stack\nversion: 0.1.0 # version of the stack\ndescription: sample stack to help creation of more appsody stacks # free form text explaining more about the capabilities of this stack and various templates\nlicense: Apache-2.0 # license for the stack\nlanguage: nodejs # programming language the stack uses\nmaintainers: # list of maintainer(s) details\n  - name: John Smith\n    email: example@example.com\n    github-id: jsmith\ndefault-template: my-template # name of default template\n</code></pre>\n<h2>Stack Image</h2>\n<p>Appsody application stacks are provided to developers as a Docker image and include a pre-configured technology stack ready to start application development. It also has mechanisms to control which aspects can and cannot be overridden by the developer.</p>\n<h3>Project directory:</h3>\n<p>The project folder should contain a production <a href=\"#Dockerfile\">Dockerfile</a> for your application and the project you are going to contribute as a content provider.</p>\n<h4>Dockerfile</h4>\n<p>Defines the final image that contains content from both the <a href=\"#Image\">image</a> and <a href=\"#Templates\">template</a>. This is used to run the application as a whole.</p>\n<h3>Dockerfile-stack:</h3>\n<p>The Dockerfile-stack defines the foundation application image, and a set of environment variables that specify the desired behaviour during local development cycle. It also defines what is exposed from the host machine to the container.</p>\n<p>Environment variables can be set to alter the behaviour of the CLI and controller.</p>\n<h2>Templates</h2>\n<p>A template is a pre-configured starter application that is ready to use with a particular image. It has access to all the dependencies supplied by that image and is able to include new functionality and extra dependencies to enhance the image where allowed.</p>","frontmatter":{"path":"/docs/stacks/stack-structure","title":"Stack structure"}}},{"node":{"html":"<h1>Appsody Stacks</h1>\n<p>Appsody provides pre-configured application stacks that enable rapid development of quality microservice-based applications. Stacks include a base container image and project templates which act as a starting point for your application development.</p>\n<p>Appsody stacks include language runtimes, frameworks and any additional libraries and tools that are required to simplify your local application development. Stacks are an easy way to manage consistency and adopt best practices across many applications.</p>\n<p><strong>Template:</strong> A template utilizes the base image and provides a starter application that is ready to use. It leverages existing capabilities provided by that image and can extend functionality to meet your application requirements.</p>\n<hr>\n<p>Stacks are categorized as either <code>stable</code>, <code>incubator</code> or <code>experimental</code> depending on the content of the stack.</p>\n<ul>\n<li>\n<p><code>stable/</code>: Stable stacks meet this set of <a href=\"https://github.com/appsody/stacks/blob/master/TECHNICAL_REQUIREMENTS.md\">technical requirements</a>.</p>\n</li>\n<li>\n<p><code>incubator/</code>: The stacks in the incubator folder are actively being worked on to satisfy the stable criteria.</p>\n</li>\n<li>\n<p><code>experimental/</code>: Experimental stacks are not being actively been worked on and may not fulfill the requirements of an Appsody stack. These can be used for trying out specific capabilities or proof of concept work.</p>\n</li>\n</ul>\n<h2>Getting started</h2>\n<p>Follow our <a href=\"/docs/getting-started/quick-start.md\">Quick Start Guide</a> to get you up and running with Appsody.</p>\n<p>To find a list of existing stacks that are available to you:</p>\n<ul>\n<li>Visit the <a href=\"https://appsody.dev\">Appsody website</a> or</li>\n<li>Run the <code>appsody list</code> command within the Appsody CLI</li>\n</ul>\n<p>For information on Appsody local development go <a href=\"/docs/using-appsody/local-development.md\">here</a>.</p>\n<h2>Modifying existing stacks</h2>\n<p>You might want to modify an existing stack to suit your development needs, for example you might want to use a different library or runtime version.</p>\n<p>To learn how to go about modifying an existing stack go to <a href=\"/docs/stacks/modify.md\">modifying a stack</a>.</p>\n<h2>Creating new stacks</h2>\n<p>We are actively working to create new stacks so that more people can adopt Appsody. If you find that none of the existing stacks meet your needs please reach out to us on the <a href=\"https://appsody-slack.eu-gb.mybluemix.net/\">Appsody Slack</a> or create a new GitHub issue to track the discussion.</p>\n<p>We always welcome any contributions. If you wanted to create your own stack for a framework or language that we do not currently support, please review the <a href=\"https://github.com/appsody/website/blob/master/CONTRIBUTING.md\">contributing guidelines</a> and follow the steps outlined in <a href=\"/docs/stacks/create.md\">creating a stack</a>.</p>\n<h2>Need help?</h2>\n<p>If you have a question that you can't find an answer to, we would also like to hear about that too. You can reach out to the community for assistance on <a href=\"https://appsody-slack.eu-gb.mybluemix.net/\">Slack</a>.</p>","frontmatter":{"path":"/docs/stacks/stacks-overview","title":"Appsody Stacks"}}},{"node":{"html":"<h1>Initializing Appsody Projects</h1>\n<p>The easiest way to initialize an Appsody project is to start a new source code project from a stack template. However, you can also configure an existing source code project to use an appropriate Appsody stack.  </p>\n<h2>Creating a new project</h2>\n<p>The first step to creating a new project is to create an empty directory and give your project a name. You might want to place the project directory next to your other source code projects or your IDE workspace. For example:</p>\n<pre><code>cd /path/to/your/project/workspace\nmkdir my-project\ncd my-project\n</code></pre>\n<p>Alternatively, you could clone an empty git repository or create an empty project in an IDE, then navigate to that directory in the terminal. Appsody is tolerant of some hidden files in the project directory, such as .git, .project, or .settings files. The <code>appsody init &#x3C;repo>/&#x3C;stack> &#x3C;template></code> command won't overwrite files without the <code>--overwrite</code> option.</p>\n<p>Next, choose a stack. Use <code>appsody list</code> to view the available stacks.</p>\n<p>Here is an example of the output produced by the <code>appsody list</code> command:</p>\n<pre><code>$ appsody list\n\nREPO            ID                          VERSION     TEMPLATES           DESCRIPTION                                \nappsodyhub      java-microprofile           0.2.6       *default            Eclipse MicroProfile using OpenJ9 and Maven\nappsodyhub      java-spring-boot2           0.3.2       *default, kotlin    Spring Boot using OpenJ9 and Maven         \nappsodyhub      nodejs                      0.2.3       *simple             Runtime for Node.js applications           \nappsodyhub      nodejs-express              0.2.3       *simple, skaffold   Express web framework for Node.js          \nappsodyhub      swift                       0.1.2       *simple             Runtime for Swift applications \nexperimental    java-spring-boot2-liberty   0.1.0       *default            Spring Boot using OpenJ9, Maven and OpenLiberty\nexperimental    nodejs-functions            0.1.1       *simple             Serverless runtime for Node.js functions       \nexperimental    quarkus                     0.1.1       *default            Quarkus runtime for running Java applications \n</code></pre>\n<p>You can limit the <code>appsody list</code> output by specifying a <code>repository name</code> as shown below:</p>\n<pre><code>$ appsody list appsodyhub\n\nREPO        ID                  VERSION     TEMPLATES           DESCRIPTION                                \nappsodyhub  java-microprofile   0.2.6       *default            Eclipse MicroProfile using OpenJ9 and Maven\nappsodyhub  java-spring-boot2   0.3.2       *default, kotlin    Spring Boot using OpenJ9 and Maven         \nappsodyhub  nodejs              0.2.3       *simple             Runtime for Node.js applications           \nappsodyhub  nodejs-express      0.2.3       *simple, skaffold   Express web framework for Node.js          \nappsodyhub  swift               0.1.2       *simple             Runtime for Swift applications \n</code></pre>\n<p>When you have chosen your stack, run <code>appsody init &#x3C;repository-name>/&#x3C;stack> &#x3C;template></code> for the repository and stack of your choice. This command downloads the default project template for the stack and initializes Appsody for local development.  If you elect to only specify the stack, e.g. <code>appsody init &#x3C;stack></code>, the default repository is assumed.  If you do not specify a template, the default template is assumed.</p>\n<p>Now you have a fully functional Appsody project. For more details on running the project, see <a href=\"/docs/using-appsody/local-development.md\">Local Development</a>.</p>\n<h2>Configuring an existing project</h2>\n<p>You can configure an existing project to use Appsody, which typically involves adjusting the project structure.</p>\n<p>First, choose a stack that closely resembles your existing project. Use <code>appsody list</code> to view the available stacks, and review the <a href=\"https://github.com/appsody/stacks/tree/master/incubator\">documentation</a> for the appropriate stack.</p>\n<p>Next, from your project directory, run <code>appsody init &#x3C;stack> none</code> to initialize Appsody without using a template on the existing project.</p>\n<p>You might need to update the structure of your project so that the stack can find and run your code. Because each stack has a different structure, refer to the documentation for your stack and review the project template for guidance.</p>\n<p>When you have updated the project structure, start the development container to verify that it is working with <code>appsody run</code>. For more details on running the project, see <a href=\"/docs/using-appsody/local-development.md\">Local Development</a>.</p>","frontmatter":{"path":"/docs/using-appsody/initializing-project","title":"Initializing Appsody Projects"}}},{"node":{"html":"<h2>Setting up Knative Serving for Local Kubernetes Development</h2>\n<p>In order to work with Kubernetes locally, it is recommended that you enable Kubernetes in Docker for Desktop. To do that, first make sure that Docker is running by running the Docker app which launches Docker and adds the Docker icon to the menu bar.</p>\n<p>Select the Docker icon in the Menu bar, click <strong>Preferences</strong> and select the <strong>Kubernetes</strong> tab. Here select the <strong>Enable Kubernetes</strong> checkbox and click <strong>Apply</strong>.</p>\n<p>Click <strong>Install</strong> on the dialog box asking, “Install the Kubernetes Cluster now?” to start the install. When it’s complete it will have installed Kubernetes along with the <code>kubectl</code> command line tool which <code>appsody</code> will use to deploy your applications.</p>\n<p>Next ensure that Kubernetes has enough resources to run your apps by selecting the Docker icon in the Menu bar, click <strong>Preferences</strong> and select the <strong>Advanced</strong> tab. Use the sliders to ensure that you have <strong>6 CPUs</strong> and <strong>8.0 GiB</strong> of memory assigned to Kubernetes and click <strong>Apply &#x26; Restart</strong>.</p>\n<p>You can now use the following commands to install Knative Serving 0.7.1 (currently the latest version) and its Istio dependency using the following commands:</p>\n<ol>\n<li>\n<p>Install Istio:</p>\n<pre><code class=\"language-sh\">curl -L https://raw.githubusercontent.com/knative/serving/v0.5.2/third_party/istio-1.0.7/istio.yaml \\\n  | kubectl apply --filename -\n</code></pre>\n<p>Next, label the default namespace with <em>istio-injection=enabled</em> using the following .</p>\n<pre><code class=\"language-sh\">kubectl label namespace default istio-injection=enabled\n</code></pre>\n</li>\n<li>\n<p>Verify the STATUS of the Istio components:</p>\n<pre><code class=\"language-sh\">kubectl get pods --namespace istio-system --watch\n</code></pre>\n<p>Once all of the components have reached <code>Running</code> or <code>COMPLETED</code> you can stop watching the status using <code>Ctrl-C</code>.</p>\n</li>\n<li>\n<p>Install Knative Serving 0.7.1:</p>\n<pre><code class=\"language-sh\">curl -L https://github.com/knative/serving/releases/download/v0.7.1/serving.yaml \\\n  | kubectl apply --selector networking.knative.dev/certificate-provider!=cert-manager --filename -\n</code></pre>\n</li>\n<li>\n<p>Verify the STATUS of the Knative Serving components:</p>\n<pre><code class=\"language-sh\">kubectl get pods --namespace knative-serving --watch\n</code></pre>\n<p>Once all of the components have reached <code>Running</code> you can stop watching the status using <code>Ctrl-C</code>.</p>\n</li>\n<li>\n<p>Edit the <code>config-deployment</code> config map to enable the use of the local Docker Cache:</p>\n<pre><code class=\"language-sh\">kubectl edit -n knative-serving cm config-deployment\n</code></pre>\n<p>Add <code>registriesSkippingTagResolving: \"dev.local\"</code> under <code>data</code> so that the top of your file becomes:</p>\n<pre><code class=\"language-sh\">apiVersion: v1\ndata:\n  registriesSkippingTagResolving: \"dev.local\"\n</code></pre>\n<p>and use <code>ESCAPE</code> followed by <code>:wq</code> to save your changes.</p>\n</li>\n<li>\n<p>Discover the \"nip.io\" address for your local machine:</p>\n<pre><code class=\"language-sh\">echo $(ifconfig | grep \"inet 9.\" | cut -d ' ' -f2).nip.io\n</code></pre>\n<p>This will print an address that you will use to set a config domain in the next step.</p>\n</li>\n<li>\n<p>Edit your <code>config-domain</code> config map to set up the use of your \"nip.io\" domain:</p>\n<pre><code class=\"language-sh\">kubectl edit cm config-domain -n knative-serving\n</code></pre>\n<p>Add and entry under <code>data</code> for your \"nip.io\" address so that the top of your file is similar to:</p>\n<pre><code class=\"language-sh\">apiVersion: v1\ndata:\n  9.174.18.28.nip.io: \"\"\n</code></pre>\n<p>and use <code>ESCAPE</code> followed by <code>:wq</code> to save your changes.</p>\n</li>\n</ol>\n<p>You should now have Knative Serving installed in your Docker for Desktop based Kubernetes cluster.</p>","frontmatter":{"path":"/docs/using-appsody/installing-knative-locally","title":"Setting up Knative Serving for Local Kubernetes Development"}}},{"node":{"html":"<h1>Appsody Local Development</h1>\n<p>When a source code project is initialized with Appsody, you get a local Appsody development container. The container can be started in three modes:</p>\n<ul>\n<li>run</li>\n<li>debug</li>\n<li>test</li>\n</ul>\n<p>Typically, you run one mode at a time. If you want to run more than one mode at a time you must specify unique name and port options to avoid conflicts between containers. See <a href=\"#advanced-options\">Advanced Options</a>.</p>\n<p>While running the container in any of these modes, you can quit Appsody by pressing <code>Ctrl-C</code> or running <code>appsody stop</code> in the terminal.</p>\n<p>Each stack might open different ports and behave slightly differently across these modes. For more information, see the <a href=\"https://github.com/appsody/stacks/tree/master/incubator\">documentation</a> for the appropriate stack.</p>\n<ul>\n<li>\n<p><code>appsody run</code> starts the development container in <em>run</em> mode in the foreground. Appsody watches your local project directory for file changes and updates the application to reflect code changes as you develop.</p>\n</li>\n<li>\n<p><code>appsody debug</code> starts the development container with a debugger enabled. Typically, the stack provides a debug port that connects to your IDE. You can then set breakpoints and step through your code as it runs in the container.</p>\n</li>\n<li>\n<p><code>appsody test</code> runs the test suite for your application in the container. To define tests for the application, see the <a href=\"https://github.com/appsody/stacks/tree/master/incubator\">documentation</a> for the appropriate stack.</p>\n</li>\n</ul>\n<h2>Advanced options</h2>\n<p>The <code>appsody run|debug|test</code> commands support some of the same options as <code>docker run</code>. To see a list of supported options, run <code>appsody help run</code>.</p>\n<p>If you want to run the same Appsody project in two parallel containers, you will hit conflicts with container names and ports. You can avoid these conflicts by specifying an alternative name and port number for one of the Appsody containers.</p>\n<p>For example, to enable two parallel runs of a nodejs-express project, you can start two Appsody containers with the following command:</p>\n<pre><code>appsody run &#x26;\nappsody run --name my-project-dev2 -p 3001:3000 -p 9230:9229 &#x26;\n</code></pre>\n<p>To stop the containers:</p>\n<pre><code>appsody stop\ndocker stop my-project-dev2\n</code></pre>","frontmatter":{"path":"/docs/using-appsody/local-development","title":"Appsody Local Development"}}},{"node":{"html":"<h1>Installing Appsody</h1>\n<p>You can install Appsody on your system in a few easy steps by using our binary packages, which are available for macOS®, Ubuntu, Red Hat Enterprise Linux (RHEL), and Windows®.</p>\n<p>Because Appsody depends on Docker, ensure that you have <a href=\"https://docs.docker.com/get-started/\">Docker</a> installed and the Docker daemon running on your system.</p>\n<h2>Installing on macOS</h2>\n<p>Follow these steps:</p>\n<ol>\n<li>If you don't have the Xcode command line tools installed on your system, install them by running <code>xcode-select --install</code>.</li>\n<li>If you don't have Homebrew installed on your system, install it by running <code>/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"</code>.</li>\n<li>To install Appsody, run:</li>\n</ol>\n<pre><code>brew install appsody/appsody/appsody\n</code></pre>\n<p>This command creates a brew tap for the <code>appsody/appsody</code> repo and installs the <code>appsody</code> formula.</p>\n<p>That's all there is to it! You can now follow our <a href=\"/docs/getting-started/quick-start.md\">Quick Start</a> instructions to create your first containerized development environment with a running <em>Hello World!</em> application.</p>\n<h2>Installing on Ubuntu</h2>\n<p>Follow these steps:</p>\n<ol>\n<li>Your user account must be a member of the <code>docker</code> group, which you can configure by running <code>sudo usermod -aG docker &#x3C;username></code>.</li>\n<li>Download the latest <strong>Debian install package</strong> from the <a href=\"https://github.com/appsody/appsody/releases\">Appsody releases page</a>. The file is named <code>appsody_v.r.m_amd64.deb</code>, where <code>v.r.m</code> indicates the release tag.</li>\n<li>To install the package, run:</li>\n</ol>\n<pre><code>sudo apt install -f &#x3C;path>/appsody_v.r.m_amd64.deb\n</code></pre>\n<p>Where <code>&#x3C;path></code> is the fully qualified path to the package.</p>\n<p>That's all there is to it! You can now follow our <a href=\"/docs/getting-started/quick-start.md\">Quick Start</a> instructions to create your first containerized development environment with a running <em>Hello World!</em> application.</p>\n<p>Alternatively, if you would like to build the binaries from source code, please take a look at <a href=\"https://github.com/appsody/appsody/blob/master/build.md\">Building from Source</a>. If you would just like to download a pre-built binary, you will also need to download the <a href=\"https://github.com/appsody/controller/releases\">appsody-controller</a>.</p>\n<h2>Installing on RHEL</h2>\n<p>Follow these steps:</p>\n<ol>\n<li>Your user account must be a member of the <code>docker</code> group, which you can configure by running <code>sudo usermod -aG docker &#x3C;username></code>.</li>\n<li>Download the latest <strong>RPM install package</strong> from the <a href=\"https://github.com/appsody/appsody/releases\">Appsody releases page</a>. The file is named <code>appsody-v.r.m-1.x86_64.rpm</code>, where <code>v.r.m</code> indicates the release tag.</li>\n<li>To install the package, run:</li>\n</ol>\n<pre><code>sudo yum install &#x3C;path>/appsody-v.r.m-1.x86_64.rpm\n</code></pre>\n<p>Where <code>&#x3C;path></code> is the fully qualified path to the package.</p>\n<p>That's all there is to it! You can now follow our <a href=\"/docs/getting-started/quick-start.md\">Quick Start</a> instructions to create your first containerized development environment with a running <em>Hello World!</em> application.</p>\n<h2>Installing on Windows</h2>\n<p>Note: Appsody runs only on Windows 10.</p>\n<p>Follow these steps:</p>\n<ol>\n<li>Create a directory for Appsody on your Windows 10 system.</li>\n<li>Download the <strong>Appsody binaries for Windows</strong> from the <a href=\"https://github.com/appsody/appsody/releases\">Appsody releases page</a> into the directory. The file is named <code>appsody-v.r.m-windows.tar.gz</code>, where <code>v.r.m</code> indicates the release tag.</li>\n<li>Extract the files by running <code>tar -xvf appsody-v.r.m-windows.tar.gz</code>.</li>\n</ol>\n<p>Note: If you choose to extract the files using a GUI tool you may have to extract the <code>appsody-v.r.m-windows.tar.gz</code> file and extract the extracted <code>appsody-v.r.m-windows.tar</code> file afterwards.</p>\n<ol start=\"4\">\n<li>To install Appsody, run the following setup command:</li>\n</ol>\n<pre><code>appsody-setup.bat\n</code></pre>\n<p>That's all there is to it! You can now follow our <a href=\"/docs/getting-started/quick-start.md\">Quick Start</a> instructions to create your first containerized development environment with a running <em>Hello World!</em> application.</p>\n<p>To uninstall Appsody, delete the directory where you extracted the binaries. Optionally, remove the <code>.appsody</code> directory that gets created under your home folder and the <strong>PATH</strong> entry that was created by the setup command (see <a href=\"https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/\">Modifying the PATH on Windows 10</a>).</p>\n<h2>Running Appsody with SELinux</h2>\n<p>If you are running Security-Enhanced Linux, you may experience problems when running Appsody, because the Docker daemon - although it runs as <code>root</code> - may not be able to access the folders that are mounted from the host file system.</p>\n<p>The manifestation of these problems include errors such as those reported in the snippet below.</p>\n<pre><code>Container] [Warning] Failed to add directory to recursive watch list: /project/user-appopen /project/user-app: permission denied\nnpm ERR! path /project/user-app/package.json\n[Container] npm ERR! code EACCES\n[Container] npm ERR! errno -13\n[Container] npm ERR! syscall open\n[Container] npm ERR! Error: EACCES: permission denied, open '/project/user-app/package.json'\n</code></pre>\n<p>In order to check whether you have SELinux enabled and enforcing its policies, you can run <code>sestatus</code>. The output of this command includes the <code>Current Mode</code> of SELinux. If it is set to <code>enforcing</code>, and you see errors similar to those in the snippet above, you may need to change your SELinux configuration.</p>\n<p>This can be done by exempting the folders mounted by the stacks you are using, through the following command:</p>\n<pre><code>chcon -Rt svirt_sandbox_file_t &#x3C;/path/to/volume>\n</code></pre>\n<p>You may need to run this command multiple times, to whitelist different paths, depending on your setup, and on the mount points of the specific stack you are using.</p>\n<p>In general - however - you should be required to run the command at most twice:</p>\n<ul>\n<li>For your home directory</li>\n<li>For the directory where your Appsody project is located (assuming this isn't under your home)</li>\n</ul>\n<p>If you are unsure about which directories are mounted by the stack you are using, you can inspect the output of the <code>appsody run</code> command, and look at the <code>-v</code> parameters in the <code>docker run</code> command. For example:</p>\n<pre><code>[ibmadmin@naval1 my-project]$ appsody run\nRunning development environment...\nRunning command: docker[pull appsody/nodejs-express:0.2]\nRunning command: docker[run --rm -p 3000:3000 -p 9229:9229 --name my-project-dev -v /home/ibmadmin/appsody/my-project/:/project/user-app -v my-project-deps:/project/user-app/node_modules -v /home/ibmadmin/.appsody/appsody-controller:/appsody/appsody-controller -t --entrypoint /appsody/appsody-controller appsody/nodejs-express:0.2 --mode=run]\n</code></pre>\n<p>In the example above, there are two binding mounts:</p>\n<ul>\n<li>/home/ibmadmin/appsody/my-project/</li>\n<li>/home/ibmadmin/.appsody/appsody-controller</li>\n</ul>\n<p>In this case, whitelisting the home directory (<code>/home/ibmadmin</code>) would be sufficient.</p>\n<h1>Upgrading Appsody</h1>\n<p>Here we cover the steps to upgrade Appsody on your system.</p>\n<h2>Upgrading on macOS</h2>\n<p>To upgrade Appsody on your system, run the following command: </p>\n<pre><code>brew upgrade appsody\n</code></pre>\n<p>This command checks the installed Appsody folder for outdated installations and replaces them with newer versions.</p>\n<h2>Upgrading on Ubuntu</h2>\n<p>To upgrade Appsody on your system, follow these steps: </p>\n<ol>\n<li>Download the most recently released <strong>Debian install package</strong> from the <a href=\"https://github.com/appsody/appsody/releases\">Appsody releases page</a>. The file is named named <code>appsody_v.r.m_amd64.deb</code>, where v.r.m is the release number.</li>\n<li>Open your terminal and enter the directory in which you downloaded the file.</li>\n<li>Run the following command:</li>\n</ol>\n<pre><code>sudo apt upgrade -f ./appsody_v.r.m_amd64.deb -y\n</code></pre>\n<p><strong>Note:</strong> The command uses <code>./</code> otherwise it will not work.</p>\n<h2>Upgrading on RHEL</h2>\n<p>To upgrade Appsody on your system, follow these steps: </p>\n<ol>\n<li>Download the latest <strong>RPM install package</strong> from the <a href=\"https://github.com/appsody/appsody/releases\">Appsody releases page</a>. The file is named <code>appsody-v.r.m-1.x86_64.rpm</code>, where v.r.m is the release number.</li>\n<li>Open your terminal and enter the directory in which you downloaded the file.</li>\n<li>Run the following command:</li>\n</ol>\n<pre><code>sudo yum update appsody-v.r.m-1.x86_64.rpm -y\n</code></pre>\n<h2>Upgrading on Windows</h2>\n<p>To upgrade Appsody on your system, follow these steps: </p>\n<ol>\n<li>Download the <strong>Appsody binaries for Windows</strong> from  <a href=\"https://github.com/appsody/appsody/releases\">Appsody releases page</a>. The file is named <code>appsody-v.r.m-windows.tar.gz</code>, where <code>v.r.m</code> indicates the release tag.</li>\n<li>Move the file to the directory where you stored the existing Appsody binaries.</li>\n<li>Untar the file there: <code>tar -xvf appsody-v.r.m-windows.tar.gz</code>.</li>\n</ol>\n<p>Note: If you choose to extract the files using a GUI tool you may have to extract the <code>appsody-v.r.m-windows.tar.gz</code> file and extract the extracted <code>appsody-v.r.m-windows.tar</code> file afterwards.</p>\n<h1>Uninstalling Appsody</h1>\n<p>Here we cover the steps to uninstalling Appsody on your system.</p>\n<h2>Uninstalling on macOS</h2>\n<p>To uninstall Appsody, run the following command:</p>\n<pre><code>brew uninstall appsody\n</code></pre>\n<p>You may also want to remove the <code>.appsody</code> directory that gets created under your home directory: <code>rm -rf ~/.appsody</code>.</p>\n<h2>Uninstalling on Ubuntu</h2>\n<p>To uninstall Appsody, run the following command: </p>\n<pre><code>sudo apt remove appsody\n</code></pre>\n<p>You may also want to remove the <code>.appsody</code> directory that gets created under your home directory: <code>rm -rf ~/.appsody</code>.</p>\n<h2>Uninstalling on RHEL</h2>\n<p>To uninstall Appsody, run the following command: </p>\n<pre><code>sudo yum remove appsody\n</code></pre>\n<p>You may also want to remove the <code>.appsody</code> directory that gets created under your home directory: <code>rm -rf ~/.appsody</code>.</p>\n<h2>Uninstalling on Windows</h2>\n<p>To uninstall Appsody, delete the directory where you extracted the binaries. Optionally, remove the <code>.appsody</code> directory that gets created under your home folder and the <strong>PATH</strong> entry that was created by the setup command (see <a href=\"https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/\">Modifying the PATH on Windows 10</a>).</p>","frontmatter":{"path":"/docs/getting-started/installation","title":"Installing Appsody"}}},{"node":{"html":"<h1>Appsody Environment Variables</h1>\n<p>Stack creators configure Appsody environment variables to specify the behaviour they expect from the stack throughout the application development lifecycle. These variables are defined in <code>Dockerfile-stack</code> for the stack image. <code>Appsody CLI</code> and <code>Appsody controller</code> inspect these environment variables and then drive the expected behaviour for the developer.</p>\n<p>If a stack image is built upon another stack's image, it will inherit all the Appsody variables from the base stack. It can override the variables it wants to change. This allows users to create stacks with slightly different behaviour while still getting updates from the base stack.</p>\n<p>The following are the currently supported Appsody environment variables and their default values:</p>\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Description</th>\n<th>Example</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>APPSODY_WATCH_DIR</code></td>\n<td>This variable contains the watch directories to watch for changes in. There can be multple directories separated by a ';'. The format is dir1;dir2. The value of <code>APPSODY_MOUNTS</code> can be used in place of <code>APPSODY_WATCH_DIR</code>.</td>\n<td><code>ENV APPSODY_WATCH_DIR=/project/user-app</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_WATCH_INTERVAL</code></td>\n<td>This is the watch interval (in seconds). This is optional.</td>\n<td><code>APPSODY_WATCH_INTERVAL = 3</code></td>\n<td>2 seconds</td>\n</tr>\n<tr>\n<td><code>APPSODY_WATCH_REGEX</code></td>\n<td>This is a regex expression which describes which files are watched for changes. Currently negative look ahead matching (e.g. ignore patterns) is not supported.</td>\n<td><code>ENV APPSODY_WATCH_REGEX=\"^.*.js$\"</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_WATCH_IGNORE_DIR</code></td>\n<td>This variable contains the directories to ignore any changes in. There can be multiple directories separated by a ';'. The format is dir1;dir2.</td>\n<td><code>ENV APPSODY_WATCH_IGNORE_DIR=/project/user-app/node_modules</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_MOUNTS</code></td>\n<td>This variable contains the mount directories, which can alternatively be used as watch directories if no value exists for  <code>APPSODY_WATCH_DIR</code>.              There can be multiple mount directories separated by a';'. The format is :/.</td>\n<td><code>ENV APPSODY_MOUNTS=/:/project/user-app</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_PREP</code></td>\n<td>This is an optional command executed before the <code>APPSODY_RUN/TEST/DEBUG</code> and <code>APPSODY_RUN/TEST/DEBUG_ON_CHANGE</code> commands are run. This command should only be used to perform prerequisite checks or preparation steps prior to starting the app server. If this command fails, <code>APPSODY_RUN/TEST/DEBUG</code> will not be executed and the appsody container will be terminated. It is not recommended to perform code compilation tasks in <code>APPSODY_PREP</code> because compilation errors can typically be fixed and recovered while the container is running with the <code>APPSODY_RUN/TEST/DEBUG</code> and <code>ON_CHANGE</code> commands. Unlike those commands, <code>APPSODY_PREP</code> will only be run once and never retried. Note: <code>APPSODY_INSTALL</code> is deprecated and has been replaced with <code>APPSODY_PREP</code></td>\n<td><code>ENV APPSODY_PREP=\"npm install --prefix user-app\"</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_RUN</code></td>\n<td>This is the command run for the server process after the <code>APPSODY_PREP</code> command, when the mode is 'run'. If your command involves complex environment variable expansions, it may be better to encapsulate your command into a script.</td>\n<td><code>ENV APPSODY_RUN=\"npm start\"</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_RUN_ON_CHANGE</code></td>\n<td>This is the command run when a change is detected on the file system by the controller when the mode is 'run'. If your command involves complex environment variable expansions, it may be better to encapsulate your command into a script. If the file watching is disabled, the value should be \"\".</td>\n<td><code>ENV APPSODY_RUN_ON_CHANGE=\"npm start\"</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_RUN_KILL</code></td>\n<td><code>APPSODY_RUN_KILL</code> is used to signal that when the mode is \"run\" the controller will kill the server process started by <code>APPSODY_RUN</code> prior to starting the watch action specified by <code>APPSODY_RUN_ON_CHANGE</code>. The values supported are true or false.</td>\n<td><code>ENV APPSODY_RUN_KILL=&#x3C;true/false></code></td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>APPSODY_DEBUG</code></td>\n<td>This is the command for the server process run after the <code>APPSODY_PREP</code> command, when the mode is 'debug'. If your command involves complex environment variable expansions, it may be better to encapsulate your command into a script.</td>\n<td><code>ENV APPSODY_DEBUG=\"npm run debug\"</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_DEBUG_ON_CHANGE</code></td>\n<td>This is the command run when a change is detected on the file system by the controller when the mode is 'debug'. If your command involves complex environment variable expansions, it may be better to encapsulate your command into a script. If the file watching is disabled, the value should be \"\".</td>\n<td><code>ENV APPSODY_DEBUG_ON_CHANGE=\"npm run debug\"</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_DEBUG_KILL</code></td>\n<td>This variable isused to signal that when the mode is \"debug\" the controller will kill the server process started by <code>APPSODY_DEBUG</code> prior to starting the watch action specified by <code>APPSODY_DEBUG_ON_CHANGE</code>. The values supported are true or false.</td>\n<td><code>APPSODY_DEBUG_KILL=&#x3C;true/false></code></td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>APPSODY_TEST</code></td>\n<td>This is the command to run the test cases run after the <code>APPSODY_PREP</code> command, when the mode is 'test'. If your command involves complex environment variable expansions, it may be better to encapsulate your command into a script.</td>\n<td><code>ENV APPSODY_TEST=\"npm test &#x26;&#x26; npm test --prefix user-app\"</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_TEST_ON_CHANGE</code></td>\n<td>This is the command run when a change is detected on the file system by the controller when the mode is 'test'. If your command involves complex environment variable expansions, it may be better to encapsulate your command into a script. If the file watching is disabled, the value should be \"\".</td>\n<td><code>ENV APPSODY_TEST_ON_CHANGE=\"\"</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_TEST_KILL</code></td>\n<td>This variable is used to signal that when the mode is \"test\" the controller will kill the server process started by <code>APPSODY_TEST</code> prior to starting the watch action specified by <code>APPSODY_TEST_ON_CHANGE</code>. The values supported are true or false.</td>\n<td><code>APPSODY_TEST_KILL=&#x3C;true/false></code></td>\n<td>true</td>\n</tr>\n</tbody>\n</table>\n<h2>Appsody Shell Variables</h2>\n<p>The following are the currently supported Appsody command shell environment variables and their default values:  </p>\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Description</th>\n<th>Example</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>APPSODY_PROJECT_DIR</code></td>\n<td>This variable allows override of the project directory while running  <code>appsody run, appsody test or appsody debug</code>.</td>\n<td><code>export APPSODY_PROJECT_DIR=/&#x3C;my-project-directory></code></td>\n<td>/project</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"path":"/docs/stacks/environment-variables","title":"Appsody Environment Variables"}}},{"node":{"html":"<h1>Getting ready to deploy your Appsody project</h1>\n<p>When you've finished the development work for your Appsody project, you will have a containerized application that's ready to deploy to a suitable runtime infrastructure\nsuch as a cloud platform that hosts a Kubernetes cluster.</p>\n<p>The Appsody CLI provides various options to help you with the transition from the development phase to the deployment phase:</p>\n<ul>\n<li>You can use the <code>appsody build</code> command to generate a <em>deployment</em> Docker image on your local Docker registry, and then manually deploy that image to your runtime platform of choice.</li>\n<li>You can use the <code>appsody deploy</code> command to deploy the same <em>deployment</em> Docker image directly to a Kubernetes cluster that you are using for testing or staging.</li>\n<li>You can delegate the build and deployment steps to an external pipeline, such as a Tekton pipeline that consumes the source code of your Appsody project after you push it to a GitHub repository. In this case, you can use <code>appsody deploy</code> to generate a deployment manifest, which you can then push to your repo.</li>\n</ul>\n<p>These deployment options are covered in more detail in the following sections.</p>\n<h2>Building your runtime Docker image with Appsody</h2>\n<p>When you use the Appsody CLI to develop your applications, a <em>development</em> Docker image of the target runtime is downloaded and run for you. This image differs slightly from the image that is used at deployment time, because it configures tools that are useful only during the development phase.</p>\n<p>If you want to generate a <em>deployment</em> Docker image , use the <code>appsody build</code> command.</p>\n<p>The <code>appsody build</code> command completes the following actions:</p>\n<ul>\n<li>Extracts your code and other artifacts, including a new Dockerfile, which are required to build the <em>deployment</em> image from the <em>development</em> image. These files are saved to the <code>~/.appsody/extract</code> directory.</li>\n<li>Runs a <code>docker build</code> against the Dockerfile that was extracted on the previous step to produce a <em>deployment</em> image in your local Docker registry. If you want to give the image a name, specify the <code>-t &#x3C;tag></code> parameter. If you run <code>appsody build</code> with no parameters, the image is given a name that matches the name of your project.</li>\n</ul>\n<p><strong>Note:</strong> If your project includes uppercase characters these are converted to lowercase characters in the image name because Docker does not accept uppercase characters in image tags.</p>\n<p>Here is an example of the output produced by the <code>appsody build</code> command on a project named <code>appsody-project</code>:</p>\n<pre><code>micheles-mbp:appsody-project mchilant$ appsody build\nExtracting project from development environment\nRunning command: docker[pull appsody/nodejs:0.2]\nRunning command: docker[run --rm --name appsody-project-extract --entrypoint /bin/bash appsody/nodejs:0.2 -c if [ -f /project/Dockerfile ]; then echo \"/project/Dockerfile\"; else find / -type f -name Dockerfile; fi]\nRunning command: docker[create --name appsody-project-extract -v /Users/mchilant/appsody-project/:/project/user-app appsody/nodejs:0.2]\nRunning command: docker[cp appsody-project-extract:/project /Users/mchilant/.appsody/extract/appsody-project]\nRunning command: docker[rm appsody-project-extract -f]\nProject extracted to /Users/mchilant/.appsody/extract/appsody-project\nRunning command: docker[build -t appsody-project -f /Users/mchilant/.appsody/extract/appsody-project/Dockerfile /Users/mchilant/.appsody/extract/appsody-project]\nBuilt docker image appsody-project\n</code></pre>\n<h2>Deploying your app directly to a Kubernetes cluster</h2>\n<p><strong>Note:</strong> This deployment option is under development</p>\n<p>The <code>appsody deploy</code> command provides an example of how an application that you create with Appsody can be deployed directly to a Kubernetes cluster. The deployment occurs in the form of a Knative Serving service.</p>\n<p>To successfully run <code>appsody deploy</code> the following <strong>pre-requisites</strong> apply:</p>\n<ul>\n<li>You must have access to a Kubernetes cluster, with Knative Serving installed and running. To install Knative locally, use the Kubernetes feature in Docker for Desktop, see <a href=\"/docs/using-appsody/installing-knative-locally.md\">Installing Knative Locally</a>. To install Knative on other Kubernetes clusters, see the <a href=\"https://knative.dev/docs/install/\">Knative Install Documentation</a>.</li>\n<li>You must configure your <code>kubectl</code> CLI to point to your Kubernetes cluster.</li>\n<li>If you intend to push the Docker image containing your application to Docker Hub, your target cluster must be configured to pull images from Docker Hub.</li>\n</ul>\n<h3>Deploying your application to a local Kubernetes cluster</h3>\n<p>If you've installed a Kubernetes cluster on your development workstation and want to use your local Docker image cache instead of pushing the image to Docker Hub, make sure you set up your Kubernetes cluster to consume images from the local Docker cache.</p>\n<p>To deploy your Appsody project locally, run:</p>\n<pre><code>appsody deploy\n</code></pre>\n<p>This command completes the following actions:</p>\n<ul>\n<li>Calls <code>appsody build</code> and creates a <em>deployment</em> Docker image, as described in the previous section.</li>\n<li>Tags the image with the special prefix <code>local.dev</code>, making it accessible to your Kubernetes cluster.</li>\n<li>Creates a Knative Serving manifest file named <code>appsody-service-&#x3C;nnnnnn>.yaml</code>, where <code>&#x3C;nnnnnn></code> is a random numerical value. This yaml file is used to issue a <code>kubectl apply -f</code> command against the target Kubernetes cluster.</li>\n</ul>\n<p>To delete your deployed Appsody project from a Kubernetes cluster use:</p>\n<pre><code>appsody deploy delete\n</code></pre>\n<h3>Deploying your application to Docker Hub</h3>\n<p>If your cluster is configured to pull images from Docker Hub, use the following command to deploy your application:</p>\n<pre><code>appsody deploy -t &#x3C;myaccount/appsody-project> --push --namespace mynamespace\n</code></pre>\n<p>The command completes the following actions:</p>\n<ul>\n<li>Calls <code>appsody build</code> and creates a deployment image, as described in the previous section.</li>\n<li>The <code>-t myaccount/appsody-project</code> option tags the image.</li>\n<li>The <code>--push</code> flag tells the appsody CLI to push the image to Docker Hub.</li>\n<li>The Appsody CLI creates a Knative Serving manifest file named <code>appsody-service-&#x3C;nnnnnn>.yaml</code>, where <code>&#x3C;nnnnnn></code> is a random numerical value. This yaml file is used to issue a <code>kubectl apply -f</code> command against the target Kubernetes cluster.</li>\n<li>The <code>--namespace mynamespace</code> option provisions the Knative service under the <code>mynamespace</code> namespace.</li>\n</ul>\n<p><strong>Note:</strong> If you don't specify <code>--push</code>, the image is available only on your local Docker registry and the target Kubernetes cluster must be configured to have access to your local Docker registry. Additionally, your image will be tagged as  <code>local.dev/&#x3C;project-name></code> and referenced in the Knative service manifest.</p>\n<h2>Deploying your app through a Tekton pipeline</h2>\n<p><strong>Note:</strong> This deployment option is under development</p>\n<p>Most likely, the deployment of apps created with the appsody CLI is going to occur through the invocation of a CI/CD build pipeline.</p>\n<p>As a developer, you develop your app using the appsody CLI, and when you are ready to deploy, you push your code to a repo or create a pull request on GitHub.</p>\n<p>This <a href=\"https://github.com/appsody/tekton-example\">example</a> shows you how to use Tekton pipelines to deploy your app as a Knative Serving service to a Kubernetes cluster.</p>\n<p>The following pre-requisites are required to run the example pipeline:</p>\n<ul>\n<li>You must have developed a project with the appsody CLI, and you must have checked your project into a GitHub repository.</li>\n<li>Your Kubernetes cluster must be configured to run Knative and Tekton pipelines (see <a href=\"https://knative.dev/docs/install/\">Installing Knative</a> and <a href=\"https://github.com/tektoncd/pipeline/blob/master/docs/install.md\">Installing Tekton Pipelines</a>).</li>\n<li>Your project must include a Knative Serving deployment manifest called <code>appsody-service.yaml</code>, which is a current pre-requisite if you want to run the pipeline with minimal changes. A quick way to obtain such a manifest is to run the <code>appsody deploy</code> command described in the previous section. You need to rename the <code>appsody-service-&#x3C;nnnnnn>.yaml</code> to <code>appsody-service.yaml</code>.</li>\n</ul>\n<p>More details on running the Tekton pipeline example for Appsody can be found in the repo <a href=\"https://github.com/appsody/tekton-example/blob/master/README.md\">readme file</a></p>","frontmatter":{"path":"/docs/using-appsody/building-and-deploying","title":"Getting ready to deploy your Appsody project"}}},{"node":{"html":"<h1>Appsody CLI</h1>\n<h2>appsody</h2>\n<p>Appsody CLI</p>\n<h3>Synopsis</h3>\n<p>The Appsody command-line tool (CLI) enables the rapid development of cloud native applications.</p>\n<p>Complete documentation is available at <a href=\"https://appsody.dev\">https://appsody.dev</a></p>\n<h3>Options</h3>\n<pre><code>      --config string   config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun          Turns on dry run mode\n  -h, --help            help for appsody\n  -v, --verbose         Turns on debug output and logging to a file in $HOME/.appsody/logs\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody-build\">appsody build</a>\t - Locally build a docker image of your appsody project</li>\n<li><a href=\"#appsody-completion\">appsody completion</a>\t - Generates bash tab completions</li>\n<li><a href=\"#appsody-debug\">appsody debug</a>\t - Run the local Appsody environment in debug mode</li>\n<li><a href=\"#appsody-deploy\">appsody deploy</a>\t - Build and deploy your Appsody project to your Kubernetes cluster</li>\n<li><a href=\"#appsody-extract\">appsody extract</a>\t - Extract the stack and your Appsody project to a local directory</li>\n<li><a href=\"#appsody-init\">appsody init</a>\t - Initialize an Appsody project with a stack and template app</li>\n<li><a href=\"#appsody-list\">appsody list</a>\t - List the Appsody stacks available to init</li>\n<li><a href=\"#appsody-operator\">appsody operator</a>\t - Install or uninstall the Appsody operator from your Kubernetes cluster.</li>\n<li><a href=\"#appsody-repo\">appsody repo</a>\t - Manage your Appsody repositories</li>\n<li><a href=\"#appsody-run\">appsody run</a>\t - Run the local Appsody environment for your project</li>\n<li><a href=\"#appsody-stop\">appsody stop</a>\t - Stops the local Appsody docker container for your project</li>\n<li><a href=\"#appsody-test\">appsody test</a>\t - Test your project in the local Appsody environment</li>\n<li><a href=\"#appsody-version\">appsody version</a>\t - Show Appsody CLI version</li>\n</ul>\n<h2>appsody build</h2>\n<p>Locally build a docker image of your appsody project</p>\n<h3>Synopsis</h3>\n<p>This allows you to build a local Docker image from your Appsody project. Extract is run before the docker build.</p>\n<pre><code>appsody build [flags]\n</code></pre>\n<h3>Options</h3>\n<pre><code>      --docker-options string   Additional options to be sent when running docker commands.  Value must be in \"\".\n  -h, --help                    help for build\n  -t, --tag string              Docker image name and optionally a tag in the 'name:tag' format\n</code></pre>\n<h3>Options inherited from parent commands</h3>\n<pre><code>      --config string   config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun          Turns on dry run mode\n  -v, --verbose         Turns on debug output and logging to a file in $HOME/.appsody/logs\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody\">appsody</a>\t - Appsody CLI</li>\n</ul>\n<h2>appsody completion</h2>\n<p>Generates bash tab completions</p>\n<h3>Synopsis</h3>\n<p>Outputs a bash completion script for appsody to stdout.  Bash completion is optionally available for your convenience. It helps you fill out appsody commands when you type the [TAB] key.</p>\n<pre><code>To install on macOS\n1. brew install bash-completion\n2. Make sure to update your ~/.bash_profile as instructed\n3. appsody completion > /usr/local/etc/bash_completion.d/appsody\n\nTo install on Linux\n1. On a current Linux OS (in a non-minimal installation), bash completion should be available.\n2. For Debian see the following link for more information:  https://debian-administration.org/article/316/An_introduction_to_bash_completion_part_1\n3. Make sure to copy the appsody completion file generated above into the appropriate directory for your Linux distribution e.g.\nappsody completion >  /etc/bash_completion.d/appsody\n</code></pre>\n<pre><code>appsody completion [flags]\n</code></pre>\n<h3>Options</h3>\n<pre><code>  -h, --help   help for completion\n</code></pre>\n<h3>Options inherited from parent commands</h3>\n<pre><code>      --config string   config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun          Turns on dry run mode\n  -v, --verbose         Turns on debug output and logging to a file in $HOME/.appsody/logs\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody\">appsody</a>\t - Appsody CLI</li>\n</ul>\n<h2>appsody debug</h2>\n<p>Run the local Appsody environment in debug mode</p>\n<h3>Synopsis</h3>\n<p>This starts a docker based continuous build environment for your project with debugging enabled.</p>\n<pre><code>appsody debug [flags]\n</code></pre>\n<h3>Options</h3>\n<pre><code>      --deps-volume string      Docker volume to use for dependencies. Mounts to APPSODY_DEPS dir. (default \"my-project-deps\")\n      --docker-options string   Specify the docker options to use.  Value must be in \"\".\n  -h, --help                    help for debug\n      --name string             Assign a name to your development container. (default \"my-project-dev\")\n      --network string          Specify the network for docker to use.\n  -p, --publish stringArray     Publish the container's ports to the host. The stack's exposed ports will always be published, but you can publish addition ports or override the host ports with this option.\n  -P, --publish-all             Publish all exposed ports to random ports\n</code></pre>\n<h3>Options inherited from parent commands</h3>\n<pre><code>      --config string   config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun          Turns on dry run mode\n  -v, --verbose         Turns on debug output and logging to a file in $HOME/.appsody/logs\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody\">appsody</a>\t - Appsody CLI</li>\n</ul>\n<h2>appsody deploy</h2>\n<p>Build and deploy your Appsody project to your Kubernetes cluster</p>\n<h3>Synopsis</h3>\n<p>This command extracts the code from your project, builds a local Docker image for deployment,\ngenerates a deployment manifest (yaml) file if one is not present, and uses it to deploy your image to Kubernetes or Knative.</p>\n<pre><code>appsody deploy [flags]\n</code></pre>\n<h3>Options</h3>\n<pre><code>  -f, --file string        The file name to use for the deployment configuration. (default \"app-deploy.yaml\")\n      --force              Force the reuse of the deployment configuration file if one exists.\n      --generate-only      Only generate the deployment configuration file. Do not deploy the project.\n  -h, --help               help for deploy\n  -n, --namespace string   Target namespace in your Kubernetes cluster\n      --push               Push this image to an external Docker registry. Assumes that you have previously successfully done docker login\n  -t, --tag string         Docker image name and optionally a tag in the 'name:tag' format\n</code></pre>\n<h3>Options inherited from parent commands</h3>\n<pre><code>      --config string   config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun          Turns on dry run mode\n  -v, --verbose         Turns on debug output and logging to a file in $HOME/.appsody/logs\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody\">appsody</a>\t - Appsody CLI</li>\n<li><a href=\"#appsody-deploy-delete\">appsody deploy delete</a>\t - Delete your deployed Appsody project from a Kubernetes cluster</li>\n</ul>\n<h2>appsody deploy delete</h2>\n<p>Delete your deployed Appsody project from a Kubernetes cluster</p>\n<h3>Synopsis</h3>\n<p>This command deletes your deployed Appsody project from the configured Kubernetes cluster using your existing deployment manifest.</p>\n<pre><code>appsody deploy delete [flags]\n</code></pre>\n<h3>Options</h3>\n<pre><code>  -h, --help   help for delete\n</code></pre>\n<h3>Options inherited from parent commands</h3>\n<pre><code>      --config string      config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun             Turns on dry run mode\n  -f, --file string        The file name to use for the deployment configuration. (default \"app-deploy.yaml\")\n      --force              Force the reuse of the deployment configuration file if one exists.\n      --generate-only      Only generate the deployment configuration file. Do not deploy the project.\n  -n, --namespace string   Target namespace in your Kubernetes cluster\n      --push               Push this image to an external Docker registry. Assumes that you have previously successfully done docker login\n  -t, --tag string         Docker image name and optionally a tag in the 'name:tag' format\n  -v, --verbose            Turns on debug output and logging to a file in $HOME/.appsody/logs\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody-deploy\">appsody deploy</a>\t - Build and deploy your Appsody project to your Kubernetes cluster</li>\n</ul>\n<h2>appsody extract</h2>\n<p>Extract the stack and your Appsody project to a local directory</p>\n<h3>Synopsis</h3>\n<p>This copies the full project, stack plus app, into a local directory\nin preparation to build the final docker image.</p>\n<pre><code>appsody extract [flags]\n</code></pre>\n<h3>Options</h3>\n<pre><code>  -h, --help                help for extract\n      --name string         Assign a name to your development container. (default \"my-project-extract\")\n      --target-dir string   Directory path to place the extracted files. This dir must not exist, it will be created.\n</code></pre>\n<h3>Options inherited from parent commands</h3>\n<pre><code>      --config string   config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun          Turns on dry run mode\n  -v, --verbose         Turns on debug output and logging to a file in $HOME/.appsody/logs\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody\">appsody</a>\t - Appsody CLI</li>\n</ul>\n<h2>appsody init</h2>\n<p>Initialize an Appsody project with a stack and template app</p>\n<h3>Synopsis</h3>\n<p>This creates a new Appsody project in a local directory or sets up the local dev environment of an existing Appsody project.</p>\n<p>If the [repository] is not specified the default repository will be used. If no [template] is specified, the default template will be used.\nWith the [stack], [repository]/[stack], [stack][template] or [repository]/[stack][template] arguments, this command will setup a new Appsody project. It will create an Appsody stack config file, unzip a template app, and run the stack init script to setup the local dev environment. It is typically run on an empty directory and may fail\nif files already exist. See the --overwrite and --no-template options for more details.\nUse 'appsody list' to see the available stack options.</p>\n<p>If keyword \"none\" is specified instead of a [template], the project will be initialized to use Appsody, and no tempalte will be provided.</p>\n<p>Without the [stack] argument, this command must be run on an existing Appsody project and will only run the stack init script to\nsetup the local dev environment.</p>\n<pre><code>appsody init [stack] or [repository]/[stack] [template] [flags]\n</code></pre>\n<h3>Options</h3>\n<pre><code>  -h, --help          help for init\n      --no-template   Only create the .appsody-config.yaml file. Do not unzip the template project. [Deprecated]\n      --overwrite     Download and extract the template project, overwriting existing files.  This option is not intended to be used in Appsody project directories.\n</code></pre>\n<h3>Options inherited from parent commands</h3>\n<pre><code>      --config string   config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun          Turns on dry run mode\n  -v, --verbose         Turns on debug output and logging to a file in $HOME/.appsody/logs\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody\">appsody</a>\t - Appsody CLI</li>\n</ul>\n<h2>appsody list</h2>\n<p>List the Appsody stacks available to init</p>\n<h3>Synopsis</h3>\n<p>This command lists all the stacks available in your repositories. If you omit the  optional [repository] parameter, the stacks for all the repositories are listed. If you specify the repository name [repository], only the stacks in that repository will be listed.</p>\n<pre><code>appsody list [repository] [flags]\n</code></pre>\n<h3>Options</h3>\n<pre><code>  -h, --help   help for list\n</code></pre>\n<h3>Options inherited from parent commands</h3>\n<pre><code>      --config string   config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun          Turns on dry run mode\n  -v, --verbose         Turns on debug output and logging to a file in $HOME/.appsody/logs\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody\">appsody</a>\t - Appsody CLI</li>\n</ul>\n<h2>appsody operator</h2>\n<p>Install or uninstall the Appsody operator from your Kubernetes cluster.</p>\n<h3>Synopsis</h3>\n<p>This command allows you to \"install\" or \"uninstall\" the Appsody operator from the configured Kubernetes cluster. An installed Appsody operator is required to deploy your Appsody projects.</p>\n<h3>Options</h3>\n<pre><code>  -h, --help                help for operator\n  -n, --namespace string    The namespace in which the operator will run. (default \"default\")\n  -w, --watchspace string   The namespace which the operator will watch. Use '' for all namespaces. (default \"''\")\n</code></pre>\n<h3>Options inherited from parent commands</h3>\n<pre><code>      --config string   config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun          Turns on dry run mode\n  -v, --verbose         Turns on debug output and logging to a file in $HOME/.appsody/logs\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody\">appsody</a>\t - Appsody CLI</li>\n<li><a href=\"#appsody-operator-install\">appsody operator install</a>\t - Install the Appsody Operator into the configured Kubernetes cluster</li>\n<li><a href=\"#appsody-operator-uninstall\">appsody operator uninstall</a>\t - Uninstall the Appsody Operator from the configured Kubernetes cluster</li>\n</ul>\n<h2>appsody operator install</h2>\n<p>Install the Appsody Operator into the configured Kubernetes cluster</p>\n<h3>Synopsis</h3>\n<p>Install the Appsody Operator into the configured Kubernetes cluster</p>\n<pre><code>appsody operator install [flags]\n</code></pre>\n<h3>Options</h3>\n<pre><code>  -h, --help   help for install\n</code></pre>\n<h3>Options inherited from parent commands</h3>\n<pre><code>      --config string       config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun              Turns on dry run mode\n  -n, --namespace string    The namespace in which the operator will run. (default \"default\")\n  -v, --verbose             Turns on debug output and logging to a file in $HOME/.appsody/logs\n  -w, --watchspace string   The namespace which the operator will watch. Use '' for all namespaces. (default \"''\")\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody-operator\">appsody operator</a>\t - Install or uninstall the Appsody operator from your Kubernetes cluster.</li>\n</ul>\n<h2>appsody operator uninstall</h2>\n<p>Uninstall the Appsody Operator from the configured Kubernetes cluster</p>\n<h3>Synopsis</h3>\n<p>Uninstall the Appsody Operator from the configured Kubernetes cluster</p>\n<pre><code>appsody operator uninstall [flags]\n</code></pre>\n<h3>Options</h3>\n<pre><code>  -h, --help   help for uninstall\n</code></pre>\n<h3>Options inherited from parent commands</h3>\n<pre><code>      --config string       config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun              Turns on dry run mode\n  -n, --namespace string    The namespace in which the operator will run. (default \"default\")\n  -v, --verbose             Turns on debug output and logging to a file in $HOME/.appsody/logs\n  -w, --watchspace string   The namespace which the operator will watch. Use '' for all namespaces. (default \"''\")\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody-operator\">appsody operator</a>\t - Install or uninstall the Appsody operator from your Kubernetes cluster.</li>\n</ul>\n<h2>appsody repo</h2>\n<p>Manage your Appsody repositories</p>\n<h3>Synopsis</h3>\n<p>Manage your Appsody repositories</p>\n<h3>Options</h3>\n<pre><code>  -h, --help   help for repo\n</code></pre>\n<h3>Options inherited from parent commands</h3>\n<pre><code>      --config string   config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun          Turns on dry run mode\n  -v, --verbose         Turns on debug output and logging to a file in $HOME/.appsody/logs\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody\">appsody</a>\t - Appsody CLI</li>\n<li><a href=\"#appsody-repo-add\">appsody repo add</a>\t - Add an Appsody repository</li>\n<li><a href=\"#appsody-repo-list\">appsody repo list</a>\t - List configured Appsody repositories</li>\n<li><a href=\"#appsody-repo-remove\">appsody repo remove</a>\t - Remove a configured Appsody repository</li>\n<li><a href=\"#appsody-repo-set-default\">appsody repo set-default</a>\t - Set desired default repository</li>\n</ul>\n<h2>appsody repo add</h2>\n<p>Add an Appsody repository</p>\n<h3>Synopsis</h3>\n<p>Add an Appsody repository</p>\n<pre><code>appsody repo add &#x3C;name> &#x3C;url> [flags]\n</code></pre>\n<h3>Options</h3>\n<pre><code>  -h, --help   help for add\n</code></pre>\n<h3>Options inherited from parent commands</h3>\n<pre><code>      --config string   config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun          Turns on dry run mode\n  -v, --verbose         Turns on debug output and logging to a file in $HOME/.appsody/logs\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody-repo\">appsody repo</a>\t - Manage your Appsody repositories</li>\n</ul>\n<h2>appsody repo list</h2>\n<p>List configured Appsody repositories</p>\n<h3>Synopsis</h3>\n<p>List configured Appsody repositories. An asterisk denotes the default repository.</p>\n<pre><code>appsody repo list [flags]\n</code></pre>\n<h3>Options</h3>\n<pre><code>  -h, --help   help for list\n</code></pre>\n<h3>Options inherited from parent commands</h3>\n<pre><code>      --config string   config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun          Turns on dry run mode\n  -v, --verbose         Turns on debug output and logging to a file in $HOME/.appsody/logs\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody-repo\">appsody repo</a>\t - Manage your Appsody repositories</li>\n</ul>\n<h2>appsody repo remove</h2>\n<p>Remove a configured Appsody repository</p>\n<h3>Synopsis</h3>\n<p>Remove a configured Appsody repository</p>\n<pre><code>appsody repo remove &#x3C;name> [flags]\n</code></pre>\n<h3>Options</h3>\n<pre><code>  -h, --help   help for remove\n</code></pre>\n<h3>Options inherited from parent commands</h3>\n<pre><code>      --config string   config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun          Turns on dry run mode\n  -v, --verbose         Turns on debug output and logging to a file in $HOME/.appsody/logs\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody-repo\">appsody repo</a>\t - Manage your Appsody repositories</li>\n</ul>\n<h2>appsody repo set-default</h2>\n<p>Set desired default repository</p>\n<h3>Synopsis</h3>\n<p>Set desired default repository</p>\n<pre><code>appsody repo set-default &#x3C;name> [flags]\n</code></pre>\n<h3>Options</h3>\n<pre><code>  -h, --help   help for set-default\n</code></pre>\n<h3>Options inherited from parent commands</h3>\n<pre><code>      --config string   config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun          Turns on dry run mode\n  -v, --verbose         Turns on debug output and logging to a file in $HOME/.appsody/logs\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody-repo\">appsody repo</a>\t - Manage your Appsody repositories</li>\n</ul>\n<h2>appsody run</h2>\n<p>Run the local Appsody environment for your project</p>\n<h3>Synopsis</h3>\n<p>This starts a docker based continuous build environment for your project.</p>\n<pre><code>appsody run [flags]\n</code></pre>\n<h3>Options</h3>\n<pre><code>      --deps-volume string      Docker volume to use for dependencies. Mounts to APPSODY_DEPS dir. (default \"my-project-deps\")\n      --docker-options string   Specify the docker options to use.  Value must be in \"\".\n  -h, --help                    help for run\n      --name string             Assign a name to your development container. (default \"my-project-dev\")\n      --network string          Specify the network for docker to use.\n  -p, --publish stringArray     Publish the container's ports to the host. The stack's exposed ports will always be published, but you can publish addition ports or override the host ports with this option.\n  -P, --publish-all             Publish all exposed ports to random ports\n</code></pre>\n<h3>Options inherited from parent commands</h3>\n<pre><code>      --config string   config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun          Turns on dry run mode\n  -v, --verbose         Turns on debug output and logging to a file in $HOME/.appsody/logs\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody\">appsody</a>\t - Appsody CLI</li>\n</ul>\n<h2>appsody stop</h2>\n<p>Stops the local Appsody docker container for your project</p>\n<h3>Synopsis</h3>\n<p>Stop the local Appsody docker container for your project.</p>\n<p>Stops the docker container specified by the --name flag.\nIf --name is not specified, the container name is determined from the current working directory (see default below).\nTo see a list of all your running docker containers, run the command \"docker ps\". The name is in the last column.</p>\n<pre><code>appsody stop [flags]\n</code></pre>\n<h3>Options</h3>\n<pre><code>  -h, --help          help for stop\n      --name string   Assign a name to your development container. (default \"my-project-dev\")\n</code></pre>\n<h3>Options inherited from parent commands</h3>\n<pre><code>      --config string   config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun          Turns on dry run mode\n  -v, --verbose         Turns on debug output and logging to a file in $HOME/.appsody/logs\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody\">appsody</a>\t - Appsody CLI</li>\n</ul>\n<h2>appsody test</h2>\n<p>Test your project in the local Appsody environment</p>\n<h3>Synopsis</h3>\n<p>This starts a docker container for your project and runs your test in it.</p>\n<pre><code>appsody test [flags]\n</code></pre>\n<h3>Options</h3>\n<pre><code>      --deps-volume string      Docker volume to use for dependencies. Mounts to APPSODY_DEPS dir. (default \"my-project-deps\")\n      --docker-options string   Specify the docker options to use.  Value must be in \"\".\n  -h, --help                    help for test\n      --name string             Assign a name to your development container. (default \"my-project-dev\")\n      --network string          Specify the network for docker to use.\n  -p, --publish stringArray     Publish the container's ports to the host. The stack's exposed ports will always be published, but you can publish addition ports or override the host ports with this option.\n  -P, --publish-all             Publish all exposed ports to random ports\n</code></pre>\n<h3>Options inherited from parent commands</h3>\n<pre><code>      --config string   config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun          Turns on dry run mode\n  -v, --verbose         Turns on debug output and logging to a file in $HOME/.appsody/logs\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody\">appsody</a>\t - Appsody CLI</li>\n</ul>\n<h2>appsody version</h2>\n<p>Show Appsody CLI version</p>\n<h3>Synopsis</h3>\n<p>Show Appsody CLI version</p>\n<pre><code>appsody version [flags]\n</code></pre>\n<h3>Options</h3>\n<pre><code>  -h, --help   help for version\n</code></pre>\n<h3>Options inherited from parent commands</h3>\n<pre><code>      --config string   config file (default is $HOME/.appsody/.appsody.yaml)\n      --dryrun          Turns on dry run mode\n  -v, --verbose         Turns on debug output and logging to a file in $HOME/.appsody/logs\n</code></pre>\n<h3>SEE ALSO</h3>\n<ul>\n<li><a href=\"#appsody\">appsody</a>\t - Appsody CLI</li>\n</ul>","frontmatter":{"path":"/docs/using-appsody/cli-commands","title":"CLI Reference"}}}]}}}