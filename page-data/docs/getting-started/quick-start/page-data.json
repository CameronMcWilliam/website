{"componentChunkName":"component---src-templates-doc-template-js","path":"/docs/getting-started/quick-start","webpackCompilationHash":"b82ed58c8425dacbcd60","result":{"data":{"markdownRemark":{"html":"<h1>Appsody Quick Start</h1>\n<h2>Installing Appsody</h2>\n<p><strong>Prerequisite:</strong> <a href=\"https://docs.docker.com/install/\">Docker</a> is installed and running.</p>\n<p>To install Appsody on macOS, run the following commands:</p>\n<pre><code>brew tap appsody/appsody\nbrew install appsody\n</code></pre>\n<p>To install Appsody on Windows or Linux, check out the <a href=\"/docs/getting-started/installation.md\">installation guide</a>.</p>\n<h2>Using Appsody</h2>\n<p>Creating a new Appsody project is easy! With only a few commands, you will have a containerized development environment running with the stack of your choice!</p>\n<p>First, create a new directory for the project and run <code>appsody init &#x3C;stack></code> to download the template project. The following example uses the <code>nodejs-express</code> stack:</p>\n<pre><code>mkdir my-project\ncd my-project\nappsody init nodejs-express\n</code></pre>\n<p><strong>Tip:</strong> You can view other available stacks with <code>appsody list</code></p>\n<p>Now you have a fully functional Appsody project. Next, start the development container:</p>\n<pre><code>appsody run\n</code></pre>\n<p>Great! Now the project is running in a docker container, and the container is linked to the project source code on your local system. For <code>nodejs-express</code>, navigate to <a href=\"http://localhost:3000\">http://localhost:3000</a> to see the output (other stacks may use a different URL).</p>\n<p>Finally, let's try changing the code. Edit the file <code>app.js</code> to output something other than \"Hello World!\". Upon saving the file, Appsody will pickup the change and automatically update the container. Refresh <a href=\"http://localhost:3000\">http://localhost:3000</a> to see the new message!</p>\n<p>You are ready to continue developing your application. To stop the container, press <code>Ctrl-C</code> in the terminal. To enable the debugger, restart the container with <code>appsody debug</code>. </p>\n<p>Finally, when you are ready to publish a production docker image, run <code>appsody build</code>. </p>\n<p><strong>Tip:</strong> You can get more information about all the commands with <code>appsody help [command]</code> or <code>appsody &#x3C;command> --help</code>.</p>","frontmatter":{"path":"/docs/getting-started/quick-start"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"layout":"docs"}}}